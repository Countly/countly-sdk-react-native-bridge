import type { TurboModule } from "react-native";
import { TurboModuleRegistry } from "react-native";
import type { UnsafeObject } from 'react-native/Libraries/Types/CodegenTypes';

export interface Spec extends TurboModule {
    init(args: Array<UnsafeObject>): Promise<void>;
    setLoggingEnabled(args: Array<boolean>): void;
    isLoggingEnabled(): Promise<boolean>;
    isInitialized(): Promise<boolean>;
    hasBeenCalledOnStart(): Promise<boolean>;
    getCurrentDeviceId(): Promise<string>;
    getDeviceIDType(): Promise<string>;
    changeDeviceId(args: Array<string>): void;
    setHttpPostForced(args: Array<boolean>): void;
    enableParameterTamperingProtection(args: Array<string>): void;
    pinnedCertificates(args: Array<string>): void;
    setLocationInit(args: Array<string | null>): void;
    setLocation(args: Array<number>): void;
    disableLocation(): void;
    enableCrashReporting(): void;
    addCrashLog(args: Array<string>): void;
    logException(args: Array<UnsafeObject>): void;
    logJSException(err: string, message: string, stack: string): void;
    setCustomCrashSegments(args: Array<UnsafeObject>): void;
    recordEvent(args: UnsafeObject): void;
    startEvent(args: Array<string>): void;
    cancelEvent(args: Array<string>): void;
    endEvent(args: UnsafeObject): void;
    recordView(args: Array<string>): void;
    setUserData(args: Array<UnsafeObject>): Promise<void>;
    sendPushToken(args: Array<string>): void;
    pushTokenType(args: Array<string>): void;
    registerForNotification(args: Array<UnsafeObject>): void;
    askForNotificationPermission(args: Array<UnsafeObject>): void;
    configureIntentRedirectionCheck(intentClassNames: Array<string>, intentPackageNames: Array<string>, useAdditionalIntentRedirectionChecks: boolean): void;
    userData_setProperty(args: Array<UnsafeObject>): Promise<void>;
    userData_increment(args: Array<string>): Promise<void>;
    userData_incrementBy(args: Array<string | number>): Promise<void>;
    userData_multiply(args: Array<string | number>): Promise<void>;
    userData_saveMax(args: Array<string | number>): Promise<void>;
    userData_saveMin(args: Array<string | number>): Promise<void>;
    userData_setOnce(args: Array<string | number>): Promise<void>;
    userData_pushUniqueValue(args: Array<string | number | boolean>): Promise<void>;
    userData_pushValue(args: Array<string | number | boolean>): Promise<void>;
    userData_pullValue(args: Array<string | number | boolean>): Promise<void>;
    userDataBulk_setUserProperties(userData: UnsafeObject): Promise<void>;
    userDataBulk_save(args: Array<UnsafeObject>): Promise<void>;
    userDataBulk_setProperty(args: Array<UnsafeObject>): Promise<void>;
    userDataBulk_increment(args: Array<string>): Promise<void>;
    userDataBulk_incrementBy(args: Array<string | number>): Promise<void>;
    userDataBulk_multiply(args: Array<string | number>): Promise<void>;
    userDataBulk_saveMax(args: Array<string | number>): Promise<void>;
    userDataBulk_saveMin(args: Array<string | number>): Promise<void>;
    userDataBulk_setOnce(args: Array<string | number>): Promise<void>;
    userDataBulk_pushUniqueValue(args: Array<string | number | boolean>): Promise<void>;
    userDataBulk_pushValue(args: Array<string | number | boolean>): Promise<void>;
    userDataBulk_pullValue(args: Array<string | number | boolean>): Promise<void>;
    setRequiresConsent(args: Array<string>): void;
    giveConsentInit(featureNames: Array<string>): void;
    giveConsent(featureNames: Array<string>): void;
    removeConsent(featureNames: Array<string>): void;
    giveAllConsent(): void;
    removeAllConsent(): void;
    remoteConfigUpdate(args: Array<UnsafeObject>, callback: () => void): void;
    updateRemoteConfigForKeysOnly(args: Array<UnsafeObject>, callback: () => void): void;
    updateRemoteConfigExceptKeys(args: Array<UnsafeObject>, callback: () => void): void;
    getRemoteConfigValueForKey(args: Array<string>, callback: () => void): void;
    getRemoteConfigValueForKeyP(keyName: string): Promise<UnsafeObject>;
    remoteConfigClearValues(): Promise<void>;
    setStarRatingDialogTexts(args: Array<string>): void;
    showStarRating(args: Array<string>, callback: () => void): void;
    presentRatingWidgetWithID(args: Array<string>): void;
    getFeedbackWidgets(): Promise<UnsafeObject>;
    getFeedbackWidgetData(args: Array<string>): Promise<UnsafeObject>;
    reportFeedbackWidgetManually(args: Array<string>): Promise<void>;
    getAvailableFeedbackWidgets(): Promise<UnsafeObject>;
    presentFeedbackWidget(args: Array<string>): Promise<void>;
    replaceAllAppKeysInQueueWithCurrentAppKey(): void;
    removeDifferentAppKeysFromQueue(): void;
    setEventSendThreshold(args: Array<number>): void;
    startTrace(args: Array<string>): void;
    cancelTrace(args: Array<string>): void;
    clearAllTraces(args: Array<string>): void;
    endTrace(args: Array<string>): void;
    recordNetworkTrace(args: Array<string>): void;
    enableApm(args: Array<string>): void;
    recordAttributionID(args: Array<string>): void;
    recordIndirectAttribution(args: Array<string>): void;
    recordDirectAttribution(args: Array<string>): void;
    appLoadingFinished(): void;
    enterContentZone(): void;
    refreshContentZone(): void;
    exitContentZone(): void;
    setID(newDeviceID: string): void;
    setCustomMetrics(args: Array<UnsafeObject>): void;
}

export default TurboModuleRegistry.getEnforcing<Spec>("CountlyReactNative");